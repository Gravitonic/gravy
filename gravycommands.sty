\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{gravycommands}

% automatic delimiter sizing
\ExplSyntaxOn

% variable prefix: t for text version, macro name for macro version
\tl_const:Nn \c_gravy_tparen_tl {       ( }
\tl_const:Nn \c_gravy_lparen_tl { \lparen }
\tl_const:Nn \c_gravy_tbrack_tl {       [ }
\tl_const:Nn \c_gravy_lbrack_tl { \lbrack }
\tl_const:Nn \c_gravy_tbrace_tl {      \{ }
\tl_const:Nn \c_gravy_lbrace_tl { \lbrace }
\tl_const:Nn \c_gravy_tangle_tl {       < }
\tl_const:Nn \c_gravy_langle_tl { \langle }
\tl_const:Nn \c_gravy_tvert_tl  {       | }
\tl_const:Nn \c_gravy_vert_tl   {   \vert }
\tl_const:Nn \c_gravy_lvert_tl  {  \lvert }
\tl_const:Nn \c_gravy_tVert_tl  {      \| }
\tl_const:Nn \c_gravy_Vert_tl   {   \Vert }
\tl_const:Nn \c_gravy_lVert_tl  {  \lVert }

% internal command, redefined to find delimited content as appropriate
% see: https://tex.stackexchange.com/a/706258/183767
\NewDocumentCommand{\autox}{}{}

% \auto: automatic bracket sizing
% automatically sizes detected delimiters
% example usage: \auto(\frac{1}{2})
% can also manually specify delimiters to look for in optional argument
% optional argument should receive only two tokens
% example usage: \auto[.\rvert] .\dv{f}{t} \rvert_{t = 0}
\NewDocumentCommand\auto{ o m }{
  \tl_if_novalue:nTF { #1 } {
    \tl_set:Nx \l_firstchar_tl { \tl_head:n { #2 } }
    \tl_case:Nn \l_firstchar_tl {
      \c_gravy_tparen_tl { \autotparens #2 }
      \c_gravy_lparen_tl { \autolparens #2 }
      \c_gravy_tbrack_tl { \autotbracks #2 }
      \c_gravy_lbrack_tl { \autolbracks #2 }
      \c_gravy_tbrace_tl { \autotbraces #2 }
      \c_gravy_lbrace_tl { \autolbraces #2 }
      \c_gravy_tangle_tl { \autotangles #2 }
      \c_gravy_langle_tl { \autolangles #2 }
      \c_gravy_tvert_tl  {  \autotverts #2 }
      \c_gravy_vert_tl   {   \autoverts #2 }
      \c_gravy_lvert_tl  {  \autolverts #2 }
      \c_gravy_tVert_tl  {  \autotVerts #2 }
      \c_gravy_Vert_tl   {   \autoVerts #2 }
      \c_gravy_lVert_tl  {  \autolVerts #2 }
    }
  } {
    \tl_set:Nx \l_open_tl { \tl_head:n { #1 } }
    \tl_set:Nx \l_close_tl { \tl_item:nn { #1 } { -1 } }
    \RenewDocumentCommand\autox{ r#1 } { \left\l_open_tl ##1 \right\l_close_tl }
    \autox #2
  }
}

\ExplSyntaxOff

\NewDocumentCommand\autotparens{ r() }{
  \left(#1\right)
}

\NewDocumentCommand\autolparens{ r\lparen\rparen }{
  \left\lparen#1\right\rparen
}

\NewDocumentCommand\autotbracks{ r[] }{
  \left[#1\right]
}

\NewDocumentCommand\autolbracks{ r\lbrack\rbrack }{
  \left\lbrack#1\right\rbrack
}

\NewDocumentCommand\autotbraces{ r\{\} }{
  \left\{#1\right\}
}

\NewDocumentCommand\autolbraces{ r\lbrace\rbrace }{
  \left\lbrace#1\right\rbrace
}

\NewDocumentCommand\autotangles{ r<> }{
  \left<#1\right>
}

\NewDocumentCommand\autolangles{ r\langle\rangle }{
  \left\langle#1\right\rangle
}

\NewDocumentCommand\autotverts{ r|| }{
  \left|#1\right|
}

\NewDocumentCommand\autoverts{ r\vert\vert }{
  \left\vert#1\right\vert
}

\NewDocumentCommand\autolverts{ r\lvert\rvert }{
  \left\lvert#1\right\rvert
}

\NewDocumentCommand\autotVerts{ r\|\| }{
  \left\|#1\right\|
}

\NewDocumentCommand\autoVerts{ r\Vert\Vert }{
  \left\Vert#1\right\Vert
}

\NewDocumentCommand\autolVerts{ r\lVert\rVert }{
  \left\lVert#1\right\rVert
}

% semantic delimiter command names
\ExplSyntaxOn

% usage:
% \abs{x} to produce \left|x\right|
% \abs[\big]{x} to produce \big|x\big|
% \abs*{x} to produce |x|
\NewDocumentCommand\abs{s o m}{
  \__gravy_semantic_delim:nnnnn { #1 } { #2 } { #3 } { \lvert } { \rvert }
}

\NewDocumentCommand\norm{s o m}{
  \__gravy_semantic_delim:nnnnn { #1 } { #2 } { #3 } { \lVert } { \rVert }
}

\NewDocumentCommand\set{s o m}{
  \__gravy_semantic_delim:nnnnn { #1 } { #2 } { \,#3\, } { \lbrace } { \rbrace }
}

\NewDocumentCommand\floor{s o m}{
  \__gravy_semantic_delim:nnnnn { #1 } { #2 } { #3 } { \lfloor } { \rfloor }
}

\NewDocumentCommand\ceil{s o m}{
  \__gravy_semantic_delim:nnnnn { #1 } { #2 } { #3 } { \lceil } { \rceil }
}

% #1: whether to not size delimiters (boolean)
% #2: delimiter size (possibly -NoValue-)
% #3: content
% #4: open delimiter
% #5: close delimiter
\cs_set:Nn \__gravy_semantic_delim:nnnnn {
  \bool_if:NTF #1 {
    #4#3#5
  } {
    \tl_if_novalue:nTF { #2 } {
      \left#4#3\right#5
    } {
      #2#4#3#2#5
    }
  }
}

\ExplSyntaxOff

% set such that/given

% \currentgrouptype is 16 if there is a preceding \left
% see: https://tex.stackexchange.com/a/45732
\newcommand*\given{
  \ifnum\currentgrouptype=16
    \mathrel{}\middle\vert\mathrel{}
  \else
    \mid
  \fi
}

\let\suchthat\given

% derivatives

% see: https://tex.stackexchange.com/a/523272
\newcommand*\dd{%
  \mathop{}\!\mathrm{d}
}

\ExplSyntaxOn

\NewDocumentCommand\deriv{ s o m m }{
  \__gravy_deriv:nnnnn { #1 } { #2 } { \dd } { #3 } { #4 }
}

\NewDocumentCommand\pderiv{ s o m m }{
  \__gravy_deriv:nnnnn { #1 } { #2 } { \partial } { #3 } { #4 }
}

% #1: whether to use inline fraction (boolean)
% #2: order of derivative (possibly -NoValue-)
% #3: derivative operator (e.g. \dd, \partial, etc.)
% #4: numerator
% #5: denominator
\cs_set:Nn \__gravy_deriv:nnnnn {
  \bool_if:NTF #1 {
    \tl_if_novalue:nTF { #2 } {
      #3 #4/#3 #5
    } {
      #3^{#2} #4/#3 #5^{#2}
    }
  } {
    \tl_if_novalue:nTF { #2 } {
      \frac{#3 #4}{#3 #5}
    } {
      \frac{#3^{#2} #4}{#3 #5^{#2}}
    }
  }
}

\ExplSyntaxOff

% aliases
\NewCommandCopy\dv\deriv
\NewCommandCopy\pdv\pderiv
